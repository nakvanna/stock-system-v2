# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BrandType {
  createdAt: DateTime
  updatedAt: DateTime
  success: Boolean
  message: String
  _id: ID
  name: String
  status: Boolean
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type BrandTypeEdge {
  cursor: String
  node: BrandType
}

type BrandTypePageInfo {
  hasNextPage: Boolean
  endCursor: String
}

type BrandCursorPagination {
  edges: [BrandTypeEdge!]
  nodes: [BrandType!]
  totalCount: Int
  pageInfo: BrandTypePageInfo
}

type CategoryType {
  createdAt: DateTime
  updatedAt: DateTime
  success: Boolean
  message: String
  _id: ID
  name: String
  status: Boolean
}

type CategoryTypeEdge {
  cursor: String
  node: CategoryType
}

type CategoryTypePageInfo {
  hasNextPage: Boolean
  endCursor: String
}

type CategoryCursorPagination {
  edges: [CategoryTypeEdge!]
  nodes: [CategoryType!]
  totalCount: Int
  pageInfo: CategoryTypePageInfo
}

type SubCategoryType {
  createdAt: DateTime
  updatedAt: DateTime
  success: Boolean
  message: String
  _id: ID
  category_id: String
  name: String
  status: Boolean
  category: CategoryType!
}

type SubCategoryTypeEdge {
  cursor: String
  node: SubCategoryType
}

type SubCategoryTypePageInfo {
  hasNextPage: Boolean
  endCursor: String
}

type SubCategoryCursorPagination {
  edges: [SubCategoryTypeEdge!]
  nodes: [SubCategoryType!]
  totalCount: Int
  pageInfo: SubCategoryTypePageInfo
}

type ProductMediaType {
  createdAt: DateTime
  updatedAt: DateTime
  success: Boolean
  message: String
  _id: ID
  product_id: String
  position: Float
  src: String
  alt: String
  status: Boolean
}

type ProductMediaTypeEdge {
  cursor: String
  node: ProductMediaType
}

type ProductMediaTypePageInfo {
  hasNextPage: Boolean
  endCursor: String
}

type ProductMediaCursorPagination {
  edges: [ProductMediaTypeEdge!]
  nodes: [ProductMediaType!]
  totalCount: Int
  pageInfo: ProductMediaTypePageInfo
}

type InventoryType {
  createdAt: DateTime
  updatedAt: DateTime
  success: Boolean
  message: String
  _id: ID
  purchase_id: String
  product_option_id: String
  purchase_status: String
  stock_qty: Float
  purchase_qty: Float
  buy_price: Float
  discount: Float
  tax: Float
  status: Boolean
  product_option: ProductOptionType!
}

type InventoryTypeEdge {
  cursor: String
  node: InventoryType
}

type InventoryTypePageInfo {
  hasNextPage: Boolean
  endCursor: String
}

type InventoryCursorPagination {
  edges: [InventoryTypeEdge!]
  nodes: [InventoryType!]
  totalCount: Int
  pageInfo: InventoryTypePageInfo
}

type ProductOptionType {
  createdAt: DateTime
  updatedAt: DateTime
  success: Boolean
  message: String
  _id: ID
  product_id: String
  sku: String
  weight: Float
  weight_unit: String
  price: Float
  barcode: String
  image_position: Float
  option1: String
  option2: String
  option3: String
  status: Boolean
  product: ProductType!
  inventories: [InventoryType!]!
}

type ProductOptionTypeEdge {
  cursor: String
  node: ProductOptionType
}

type ProductOptionTypePageInfo {
  hasNextPage: Boolean
  endCursor: String
}

type ProductOptionCursorPagination {
  edges: [ProductOptionTypeEdge!]
  nodes: [ProductOptionType!]
  totalCount: Int
  pageInfo: ProductOptionTypePageInfo
}

type OptionType {
  name: String
  values: [String!]
}

type ProductType {
  createdAt: DateTime
  updatedAt: DateTime
  success: Boolean
  message: String
  _id: ID
  sub_category_id: String
  brand_id: String
  title: String
  description: String
  tags: [String!]
  product_status: String
  status: Boolean
  variant1: OptionType
  variant2: OptionType
  variant3: OptionType
  sub_category: SubCategoryType!
  brand: BrandType!
  product_media: [ProductMediaType!]!
  product_option: [ProductOptionType!]!
}

type ProductTypeEdge {
  cursor: String
  node: ProductType
}

type ProductTypePageInfo {
  hasNextPage: Boolean
  endCursor: String
}

type ProductCursorPagination {
  edges: [ProductTypeEdge!]
  nodes: [ProductType!]
  totalCount: Int
  pageInfo: ProductTypePageInfo
}

type SupplierType {
  createdAt: DateTime
  updatedAt: DateTime
  success: Boolean
  message: String
  _id: ID
  name: String
  company: String
  phone: String
  email: String
  address: String
  note: String
  status: Boolean
}

type SupplierTypeEdge {
  cursor: String
  node: SupplierType
}

type SupplierTypePageInfo {
  hasNextPage: Boolean
  endCursor: String
}

type SupplierCursorPagination {
  edges: [SupplierTypeEdge!]
  nodes: [SupplierType!]
  totalCount: Int
  pageInfo: SupplierTypePageInfo
}

type PurchaseType {
  createdAt: DateTime
  updatedAt: DateTime
  success: Boolean
  message: String
  _id: ID
  supplier_id: String
  purchase_date: DateTime
  purchase_status: String
  amount: Float
  paid_amount: Float
  due_amount: Float
  description: String
  status: Boolean
  supplier: SupplierType!
  inventory: [InventoryType!]!
}

type PurchaseTypeEdge {
  cursor: String
  node: PurchaseType
}

type PurchaseTypePageInfo {
  hasNextPage: Boolean
  endCursor: String
}

type PurchaseCursorPagination {
  edges: [PurchaseTypeEdge!]
  nodes: [PurchaseType!]
  totalCount: Int
  pageInfo: PurchaseTypePageInfo
}

type CustomerType {
  createdAt: DateTime
  updatedAt: DateTime
  success: Boolean
  message: String
  _id: ID
  business_name: String
  contact_lastname: String
  contact_firstname: String
  date_of_birth: String
  phone: String
  email: String
  address1: String
  address2: String
  status: Boolean
}

type CustomerTypeEdge {
  cursor: String
  node: CustomerType
}

type CustomerTypePageInfo {
  hasNextPage: Boolean
  endCursor: String
}

type CustomerCursorPagination {
  edges: [CustomerTypeEdge!]
  nodes: [CustomerType!]
  totalCount: Int
  pageInfo: CustomerTypePageInfo
}

type Query {
  brands(options: InputCursorPaginationOption!): BrandCursorPagination!
  brand(id: ID!): BrandType!
  products(options: InputCursorPaginationOption!): ProductCursorPagination!
  product(id: ID!): ProductType!
  categories(options: InputCursorPaginationOption!): CategoryCursorPagination!
  category(id: ID!): CategoryType!
  sub_categories(options: InputCursorPaginationOption!): SubCategoryCursorPagination!
  sub_category(id: ID!): SubCategoryType!
  product_medias(options: InputCursorPaginationOption!): ProductMediaCursorPagination!
  product_media(id: ID!): ProductMediaType!
  product_options(options: InputCursorPaginationOption!): ProductOptionCursorPagination!
  product_option(id: ID!): ProductOptionType!
  inventories(options: InputCursorPaginationOption!): InventoryCursorPagination!
  inventory(id: ID!): InventoryType!
  purchases(options: InputCursorPaginationOption!): PurchaseCursorPagination!
  purchase(id: ID!): PurchaseType!
  suppliers(options: InputCursorPaginationOption!): SupplierCursorPagination!
  supplier(id: ID!): SupplierType!
  customers(options: InputCursorPaginationOption!): CustomerCursorPagination!
  customer(id: ID!): CustomerType!
}

input InputCursorPaginationOption {
  first: Float!
  after: String!
  condition: JSON!
  groupBy: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createBrand(create_input: CreateBrandInput!): BrandType!
  updateBrand(update_input: UpdateBrandInput!, id: String!): BrandType!
  removeBrand(id: String!): BrandType!
  createProduct(create_input: CreateProductInput!): ProductType!
  updateProduct(update_input: UpdateProductInput!, id: String!): ProductType!
  removeProduct(id: String!): ProductType!
  createCategory(create_input: CreateCategoryInput!): CategoryType!
  updateCategory(update_input: UpdateCategoryInput!, id: String!): CategoryType!
  removeCategory(id: String!): CategoryType!
  createSubCategory(create_input: CreateSubCategoryInput!): SubCategoryType!
  updateSubCategory(update_input: UpdateSubCategoryInput!, id: String!): SubCategoryType!
  removeSubCategory(id: String!): SubCategoryType!
  createProductMedia(create_input: CreateProductMediaInput!): ProductMediaType!
  updateProductMedia(update_input: UpdateProductMediaInput!, id: String!): ProductMediaType!
  removeProductMedia(id: String!): ProductMediaType!
  createProductOption(create_input: CreateProductOptionInput!): ProductOptionType!
  updateProductOption(update_input: UpdateProductOptionInput!, id: String!): ProductOptionType!
  removeProductOption(id: String!): ProductOptionType!
  createInventory(create_input: CreateInventoryInput!): InventoryType!
  updateInventory(update_input: UpdateInventoryInput!, id: String!): InventoryType!
  updateInventoryPurchaseStatus(update_input: UpdateInventoryInput!, purchase_id: String!): InventoryType!
  removeInventory(id: String!): InventoryType!
  createPurchase(create_input: CreatePurchaseInput!): PurchaseType!
  updatePurchase(update_input: UpdatePurchaseInput!, id: String!): PurchaseType!
  removePurchase(id: String!): PurchaseType!
  createSupplier(create_input: CreateSupplierInput!): SupplierType!
  updateSupplier(update_input: UpdateSupplierInput!, id: String!): SupplierType!
  removeSupplier(id: String!): SupplierType!
  createCustomer(create_input: CreateCustomerInput!): CustomerType!
  updateCustomer(update_input: UpdateCustomerInput!, id: String!): CustomerType!
  removeCustomer(id: String!): CustomerType!
}

input CreateBrandInput {
  name: String
}

input UpdateBrandInput {
  name: String
  status: Boolean
}

input CreateProductInput {
  sub_category_id: String
  brand_id: String
  title: String
  description: String
  tags: [String!]
  product_status: String
  variant1: OptionInput
  variant2: OptionInput
  variant3: OptionInput
  create_product_option_input: [CreateProductOptionInput!]!
}

input OptionInput {
  name: String
  values: [String!]
}

input CreateProductOptionInput {
  product_id: String
  sku: String
  weight: Float
  weight_unit: String
  price: Float
  barcode: String
  image_position: Float
  option1: String
  option2: String
  option3: String
}

input UpdateProductInput {
  sub_category_id: String
  brand_id: String
  title: String
  description: String
  tags: [String!]
  product_status: String
  variant1: OptionInput
  variant2: OptionInput
  variant3: OptionInput
  status: Boolean
}

input CreateCategoryInput {
  name: String
}

input UpdateCategoryInput {
  name: String
  status: Boolean
}

input CreateSubCategoryInput {
  category_id: String
  name: String
}

input UpdateSubCategoryInput {
  category_id: String
  name: String
  status: Boolean
}

input CreateProductMediaInput {
  product_id: String
  position: Float
  src: String
  alt: String
}

input UpdateProductMediaInput {
  product_id: String
  position: Float
  src: String
  alt: String
  status: Boolean
}

input UpdateProductOptionInput {
  product_id: String
  sku: String
  weight: Float
  weight_unit: String
  price: Float
  barcode: String
  image_position: Float
  option1: String
  option2: String
  option3: String
  status: Boolean
}

input CreateInventoryInput {
  purchase_id: String
  product_option_id: String
  purchase_status: String
  stock_qty: Float
  purchase_qty: Float
  discount: Float
  tax: Float
  buy_price: Float
}

input UpdateInventoryInput {
  purchase_id: String
  product_option_id: String
  purchase_status: String
  stock_qty: Float
  purchase_qty: Float
  buy_price: Float
  discount: Float
  tax: Float
  status: Boolean
}

input CreatePurchaseInput {
  supplier_id: String
  purchase_date: DateTime
  purchase_status: String
  amount: Float
  paid_amount: Float
  due_amount: Float
  description: String
  create_inventory_input: [CreateInventoryInput!]!
}

input UpdatePurchaseInput {
  supplier_id: String
  purchase_date: DateTime
  purchase_status: String
  amount: Float
  paid_amount: Float
  due_amount: Float
  description: String
  status: Boolean
}

input CreateSupplierInput {
  name: String
  company: String
  phone: String
  email: String
  address: String
  note: String
}

input UpdateSupplierInput {
  name: String
  company: String
  phone: String
  email: String
  address: String
  note: String
  status: Boolean
}

input CreateCustomerInput {
  business_name: String
  contact_lastname: String
  contact_firstname: String
  date_of_birth: String
  phone: String
  email: String
  address1: String
  address2: String
  status: Boolean
}

input UpdateCustomerInput {
  business_name: String
  contact_lastname: String
  contact_firstname: String
  date_of_birth: String
  phone: String
  email: String
  address1: String
  address2: String
  status: Boolean
}
